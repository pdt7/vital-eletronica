using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MySql.Data.MySqlClient;
using SVC_1.entidades;
using System.Windows.Forms;

namespace SVC_1.repositorio
{
    class ClienteDAO : DAO
    {

        public int cadastrar(Cliente cliente)
        {

            int idCliente = 0;
            try
            {
                MySqlCommand cmd = new MySqlCommand();

                String strCmd = " INSERT INTO cliente(nome, endereco, bairro, cidade, telefone, numero, complemento) " +
                                " VALUES (@nome, @endereco, @bairro, @cidade, @telefone, @numero, @complemento);";

                cmd.Parameters.Clear();
                cmd.Parameters.AddWithValue("@nome", cliente.Nome);
                cmd.Parameters.AddWithValue("@endereco", cliente.Endereco);
                cmd.Parameters.AddWithValue("@bairro", cliente.Bairro);
                cmd.Parameters.AddWithValue("@cidade", cliente.Cidade);
                cmd.Parameters.AddWithValue("@telefone", cliente.Telefone);
                cmd.Parameters.AddWithValue("@numero", cliente.Numero);
                cmd.Parameters.AddWithValue("@complemento", cliente.Complemento);
                
                OpenConnection();
                idCliente = Insere(cmd, strCmd);
                CloseConnection();
                return idCliente;
            }
            catch (MySqlException ex)
            {
                throw new Exception(ex.Message);
            }
        }

       public void atualizarQuantidade(Cliente produto)
        {
            try
            {
                MySqlCommand cmd = new MySqlCommand();
                String strCmd = " UPDATE produto SET quantidade=@quantidade WHERE id_produto=@id_produto;";
                cmd.Parameters.Clear();

                OpenConnection();
                ExecutaComando(cmd, strCmd);
                CloseConnection();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                CloseConnection();
            }
        }

        public Cliente consultarProdutoPorCodigo(string codigo, int idObra)
        {
            try
            {
                string strCmd = " SELECT * FROM produto" +
                                " WHERE codigo=@codigo"+
                                " AND idObra=@idObra;";
                MySqlCommand cmd = new MySqlCommand();
                cmd.Parameters.Clear();
                cmd.Parameters.AddWithValue("@codigo", codigo);
                cmd.Parameters.AddWithValue("@idObra", idObra);
                OpenConnection();
                MySqlDataReader dataReader = Pesquisa(cmd, strCmd);
                List<Cliente> listaProdutos = new List<Cliente>();
                listaProdutos = Popula(dataReader);
                if (listaProdutos != null && listaProdutos.Count > 0)
                {
                    return listaProdutos.First<Cliente>();
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Não foi possível localizar o produto pela ID informada." + ex.Message);
            }
            finally
            {
                CloseConnection();
            }
        }

        public Cliente consultarProdutoPorNome(string nome, int idObra)
        {
            try
            {
                string strCmd = " SELECT * FROM produto" +
                                " WHERE nome=@nome" +
                                " AND idObra=@idObra;";
                MySqlCommand cmd = new MySqlCommand();
                cmd.Parameters.Clear();
                cmd.Parameters.AddWithValue("@nome", nome);
                cmd.Parameters.AddWithValue("@idObra", idObra);
                OpenConnection();
                MySqlDataReader dataReader = Pesquisa(cmd, strCmd);
                List<Cliente> listaProdutos = new List<Cliente>();
                listaProdutos = Popula(dataReader);
                if (listaProdutos != null && listaProdutos.Count > 0)
                {
                    return listaProdutos.First<Cliente>();
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Não foi possível localizar o produto pela ID informada." + ex.Message);
            }
            finally
            {
                CloseConnection();
            }
        }

        public void atualizar(Cliente produto)
        {
            try
            {
                MySqlCommand cmd = new MySqlCommand();
                String strCmd = " UPDATE produto SET id_categoria=@id_categoria, codigo=@codigo, nome=@nome, " +
                                " quantidade_minima=@quantidade_minima, id_unidade_medida=@id_unidade_medida, idObra=@idObra WHERE id_produto=@id_produto;";
                cmd.Parameters.Clear();


                OpenConnection();
                ExecutaComando(cmd, strCmd);
                CloseConnection();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                CloseConnection();
            }
        }

        public void remover(int idProduto)
        {
            try
            {
                MySqlCommand cmd = new MySqlCommand();
                cmd.Parameters.Clear();
                cmd.Parameters.AddWithValue("@id_produto", idProduto);
                string strCmd = " DELETE FROM produto " +
                                " WHERE id_produto=@id_produto; ";
                OpenConnection();
                ExecutaComando(cmd, strCmd);
            }
            catch
            {
                throw new Exception("Não foi possível remover o Produto.");
            }
            finally
            {
                CloseConnection();
            }
        }

        public Cliente consultarProdutoPorId(int idProduto)
        {
            try
            {
                string strCmd = " SELECT * FROM produto ";
                strCmd = strCmd + " WHERE id_produto=@id_produto ";
                MySqlCommand cmd = new MySqlCommand();
                cmd.Parameters.Clear();
                cmd.Parameters.AddWithValue("@id_produto", idProduto);
                OpenConnection();
                MySqlDataReader dataReader = Pesquisa(cmd, strCmd);
                List<Cliente> listaProdutos = new List<Cliente>();
                listaProdutos = Popula(dataReader);
                if (listaProdutos != null && listaProdutos.Count > 0)
                {
                    return listaProdutos.First<Cliente>();
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Não foi possível localizar o produto pela ID informada." + ex.Message);
            }
            finally
            {
                CloseConnection();
            }
        }

        private List<Cliente> PopulaObra(MySqlDataReader dataReader)
        {
            List<Cliente> produtos = new List<Cliente>();

            while (dataReader.Read())
            {
                try
                {



                    UnidadeMedida unidadeMedida = new UnidadeMedida();
                    unidadeMedida.IdUnidade = Convert.ToInt32(dataReader["id_unidade_medida"]);

                    Obra obra = new Obra();
                    obra.IdObra = Convert.ToInt32(dataReader["idObra"]);
                    obra.Codigo = dataReader["codigoObra"].ToString();


                    produtos.Add(null);
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }
            }
            return produtos;
        }

        private List<Cliente> Popula(MySqlDataReader dataReader)
        {
            List<Cliente> produtos = new List<Cliente>();

            while (dataReader.Read())
            {
                try
                {

                    Cliente produto = new Cliente();


                    Categoria categoria = new Categoria();
                    categoria.IdCategoria = Convert.ToInt32(dataReader["id_categoria"]);



                    UnidadeMedida unidadeMedida = new UnidadeMedida();
                    unidadeMedida.IdUnidade = Convert.ToInt32(dataReader["id_unidade_medida"]);

                    Obra obra = new Obra();
                    obra.IdObra = Convert.ToInt32(dataReader["idObra"]);


                    produtos.Add(produto);
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }
            }
            return produtos;
        }


        public List<Cliente> consultarProdutoAdministrador(string valorPesquisa, string parametro)
        {
            try
            {
                MySqlCommand cmd = new MySqlCommand();
                cmd.Parameters.Clear();
                string strCmd = " SELECT p.*, o.codigo codigoObra FROM produto p, obra o where p.idObra = o.id_obra";
                if ("Nome do Produto".Equals(parametro))
                {
                    strCmd = strCmd + " AND p.nome like '%" + valorPesquisa + "%'";
                }
                else if ("Categoria".Equals(parametro))
                {
                    strCmd = strCmd + " AND p.id_categoria=@categoria ";
                    cmd.Parameters.AddWithValue("@categoria", valorPesquisa);
                }
                else if ("Quantidade".Equals(parametro))
                {
                    strCmd = strCmd + " AND p.quantidade=@quantidade";
                    cmd.Parameters.AddWithValue("@quantidade", valorPesquisa);
                }
                else if ("Quantidade Mínima".Equals(parametro))
                {
                    strCmd = strCmd + " AND p.quantidade_minima=@quantidade_minima";
                    cmd.Parameters.AddWithValue("@quantidade_minima", valorPesquisa);
                }
                else if ("Código".Equals(parametro))
                {
                    strCmd = strCmd + " AND p.codigo=@codigo";
                    cmd.Parameters.AddWithValue("@codigo", valorPesquisa);
                }
                OpenConnection();
                MySqlDataReader dataReader = Pesquisa(cmd, strCmd);
                List<Cliente> listaProdutos = new List<Cliente>();
                listaProdutos = PopulaObra(dataReader);
                if (listaProdutos != null && listaProdutos.Count > 0)
                {
                    return listaProdutos;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Não foi possível localizar o produto pela ID informada." + ex.Message);
            }
            finally
            {
                CloseConnection();
            }
        }


        public List<Cliente> consultarCliente(string valorPesquisa)
        {
            try
            {
                MySqlCommand cmd = new MySqlCommand();
                cmd.Parameters.Clear();
                string strCmd = " SELECT c.* FROM cliente c WHERE @nome like '%" + valorPesquisa + "%'";
                                
                OpenConnection();
                MySqlDataReader dataReader = Pesquisa(cmd, strCmd);
                List<Cliente> listaClientes = new List<Cliente>();
                listaClientes = PopulaObra(dataReader);
                if (listaClientes != null && listaClientes.Count > 0)
                {
                    return listaClientes;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Não foi possível localizar o cliente pelo nome fornecido.");
            }
            finally
            {
                CloseConnection();
            }
        }

    }
}
